---

- name: Tomcat | agent installation | Install required packages
  apt:
    pkg: "{{ tomcat_agents_required_libs }}"
    state: present
    update_cache: yes
  when: tomcat_agents_required_libs is defined

- name: Tomcat | agent installation | Ensure install path
  file:
    path: "{{ tomcat_install_path }}/{{ item.name }}"
    state: directory
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
  with_items: '{{ tomcat_agents_config }}'

- name: Tomcat | agent installation | Check if agent is installed
  stat:
    path: "{{ tomcat_install_path }}/{{ item.0.name }}/{{ item.1 | basename }}"
  register: agent_file_exists
  with_subelements:
    - "{{ tomcat_agents_config }}"
    - catalina_opts

- name: Tomcat | agent installation | Check agent version
  command: "cat {{ tomcat_install_path }}/{{ item.0.name }}/version.txt"
  register: agent_version_checked
  changed_when: false
  ignore_errors: true
  with_subelements:
    - "{{ tomcat_agents_config }}"
    - catalina_opts

- name: Tomcat | agent installation | Download agent
  get_url:
    dest: "/tmp"
    url: "{{ item.download_url }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: '666'
  register: agent_downloaded
  loop: "{{ tomcat_agents_config|flatten(levels=1) }}"
  loop_control:
    index_var: index
  when: >
   item.download_url | basename | splitext | last in tomcat_supported_agents_extensions and
    (tomcat_agents_force_reinstall or not
    agent_file_exists.results[index].stat.exists or
    item.version != agent_version_checked.results[index].stdout)

- name: Tomcat | agent installation | Unarchive package
  unarchive:
    src: "/tmp/{{ item.url | basename }}"
    dest: "{{ tomcat_install_path }}"
    remote_src: true
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0755
  when: item.changed and item.url | basename | splitext | last in tomcat_supported_agents_extensions
  with_items: '{{ agent_downloaded.results }}'
  tags:
    - skip_ansible_lint

- name: Tomcat | agent installation | Download agent jar
  get_url:
    dest: "{{ tomcat_install_path }}/{{ item.name }}"
    url: "{{ item.download_url }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
  loop: '{{ tomcat_agents_config | flatten(levels=1) }}'
  register: agent_jar_downloaded
  when: item.download_url | basename | splitext | last not in tomcat_supported_agents_extensions

- name: Tomcat | agent installation | Copy version number file
  template:
    src: "agents/version.txt.j2"
    dest: "{{ tomcat_install_path }}/{{ item.name }}/version.txt"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0644
  with_items: '{{ tomcat_agents_config }}'

- name: Tomcat | agent installation | Check configuration files
  set_fact:
    tomcat_agent_configuration: "{{ tomcat_agent_configuration|default([]) + [ {'name': item.0.name, 'file': item.1, 'params': item.0.params}] }}"
  with_subelements:
    - "{{ tomcat_agents_config }}"
    - configuration_files

- name: Tomcat | agent installation | Configure the Java agent
  template:
    src: "{{ playbook_dir }}/templates/tomcat/agents/{{ item.name }}/{{ item.file }}.j2"
    dest: "{{ tomcat_install_path }}/{{ item.name }}/{{ item.file }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
  when: agent_downloaded.changed
  notify: restart tomcat
  with_items:
    - '{{ tomcat_agent_configuration }}'

- name: Tomcat | agent installation | Check catalina options
  set_fact:
    tomcat_agent_catalina_opts: "{% set tomcat_agent_catalina_opts = tomcat_agent_catalina_opts|default([]) + [item.1] %}{{ tomcat_agent_catalina_opts|list }}"
  with_subelements:
    - "{{ tomcat_agents_config }}"
    - catalina_opts

- name: Tomcat | agent installation | Configure catalina options
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0640
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
  with_items:
    - { src: "setagentenv.sh.j2", dest: "{{ tomcat_bin_path }}/setagentenv.sh" }
  notify: restart tomcat
